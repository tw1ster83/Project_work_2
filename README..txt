GITFLOW_PRJ111
 
 
Проект расположен по адресу
Https://github.com/tw1ster83/Project_work_2

Прежде чем начать разработку сделайте первоначальную настройку среды разработки у себя на рабочем месте
Каждый выбирает удобную для себя IDE. 
Я же рекомендую SmartGit
скачиваем программу с официального сайта www.syntevo.com, со странички http://www.syntevo.com/smartgithg/download;
Описание установки http://all-ht.ru/inf/prog/git_003.html
В качетве начального конфига можно использовать файл https://github.com/tw1ster83/Project_work_2/blob/master/.gitconfig
Либо самостоятельно внести изменения 
1. Указываем имя пользователя 
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
Указываем редактор по умолсанию  у меня это notepad++
git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

Для удобства просмотра ветвления можно добавить алиас
git config --global alias.history '!git log --graph'

Чтобы проверить используемую конфигурацию, можете использовать команду 
git config --list

Описание назначения веток
PROD - Основная ветка проекта.
      Все, что находится в этой ветке должно работать на PROD сервере. При каждом деплое делается новая версия пакета (в gitlab – “теги”). Обязательная ветка для проекта.
HOTFIX - ветка для быстрых исправлений в prod.
       В случае, если требуется быстрое исправление ошибки/доработка функционала – заводится отдельная ветка от prod.
ВАЖНО! Название ветки «Hotfix» - виртуальное, ветка должна быть названа по коду задачи в jira.
RELEASE - ветка для подготовки релизов
       Ветка release обычно наследуется от ветки dev для фиксирования изменений, произошедших за спринт в ситуации, когда необходимо использовать ветку dev для последующих наработок.
Пример: спринт кончается в ПТ, на понедельник назначен деплой. Для того, чтобы с ПТ по ПН можно было принимать наработки в dev – используется ветка release.
Примечание: эта ветка не обязательна для репозитория.
DEV - ветка для комплексного тестирования наработок
      В эту ветку добавляются наработки из веток features путем принятого pull request владельцем репозитория (ответственным сотрудником или его заместителем). Обязательная ветка для проекта.
FEATURES - ветки для создания наработок(фич) по проекту
      Ветка заводится по каждой отдельной задаче. После ее решения ветка принимается владельцем репозитория либо в ветку dev, либо в другую ветку (например, для комплексного тестирования двух наработок, из которых складывается комплексная фича.) путем pull-request’а.
ВАЖНО! Название ветки «feature» - виртуальное, ветка должна быть названа по коду задачи в jira.

Конфигурация приложения
    Необходимо, чтобы приложение конфигурировалось без изменение исходного кода проекта. Best practices: .env или иные файлы конфигурации. К каждой стабильной(постоянной) ветке создается свой конфиг – файл (например: .env.dev)

Выпуск FEATURE
                - Перевести статус задачи (в работу) в JIRA
                - перейти в ветку dev (пример: git checkout dev) и обновить изменения (пример: git pull)
                - создать ветку где имя ветки = имя задачи в jira (пример: git checkout -b PRJ-001)
                - выполнить работу [примечание: работа может выполняться частями, соответственно коммитов может быть несколько - это нормально.]
                - оформить и сделать commit (пример: git commit -m "PRJ-001 Add feature: complex AML check of client with commulative comment and status")
                - внести изменения в текущую ветку (пример: git push origin PRJ-001)
                - создать запрос на слияние (PULL REQUEST) текущей ветки с веткой dev
Hotfix
Для веток RELEASE,DEV,PROD возможны ситуации, при которых возникает необходимость сделать быстрое исправление (Hotfix). Для решения такой ситуации заводится отдельная задача в JIRA, в качестве родительской задачи указывается FEATURE задача, из за которой возник баг. с номером этого ticket в JIRA заводится ветка (например, PRJ-91), унаследованная от ветки, в которой обнаружен баг.
Вносятся исправления, исправляющие проблему, и принимаются процессом PULL REQUEST из ветки задачи (например, PRJ-91) в целевую ветку, к которой применяется исправление (например, DEV)
Важно! Hotfix требует срочного выполнения, по этому допускается создать минимально заполненный тикет, выпустить и протестировать hotfix, а уже потом разбирать, в следствии решения какой задачи возникла проблема
PULL REQUEST
На странице проекта выбирается страница  "Запросы на слияние"->"Новый запрос на слияние".
Далее необходимо выбрать ветки: ветка- источник (откуда добавляется feature), ветка - получатель (куда доставляем feature)
Необходимо указать ответственного за code review (Assignee).
При выполнении PULL REQUEST для FEATURE ветки отметить чекбокс : "Объединить историю коммитов". При этом необходимо написать осознанный "комментарий к коммиту запроса на слияние". Это необходимо для того, чтобы промежуточные коммиты не вливались в ветки "dev" и "prod", при этом оставалось сообщение, описывающее все изменения, связанные с задачей.

Процесс приемки PULL REQUEST
При открытии pull request ответственному за проект приходит уведомление о том, что необходимо принять наработки в проект.
Необходимо развернуть проект из целевой ветки, выполнить тесты и удостовериться в том, что требования, излагаемые в задаче выполнены.
После этого выполняется merge в целевую ветку. Если в процессе Merge возник конфликт - тот, кто создавал Pull request должен решить конфликт путем merge целевой ветки в свою, и исправлением конфликта.
В случае необходимости  необходимо привлечь коллег, ответственных за участок кода, в котором возник конфликт, либо согласовать исправление с ответственным за репозиторий.
Сборка релиза для последующего деплоя
 оформить PULL REQUEST из ветки DEV в ветку RELEASE. Отметить чекбокс : "Объединить историю коммитов". Описать коммит к релизу, перечислив все features деплоя.
Обновить файл CHANGELOG.md Описать изменения текущей версии с указанием номеров запросов в JIRA и кратким описанием feature.
Провести финальные тесты и принять решение о деплое в PROD или доработке методом Hotfix.

Деплой в PROD
 оформить PULL REQUEST из ветки RELEASE в ветку PROD
В качестве комментария к запросу на слияние использовать комментарий коммита из RELEASE.

Оформить версию пакета (тег) в gitlab:
git pull origin prod
git tag v1.0.0
git push origin v1.0.0

При ведении версии стоит учитывать следующие особенности:
Версия указывается в формате {major}.{minor}.{patch}

{path} - улучшения, не связанные с введением нового функционала (оптимизация кода, улучшение производительности, etc)
{minor} - некритичные изменения API, не влияющие на клиента (downgrade-совместимое АПИ)
{major} - доработки, связанные с изменением поведения сервиса (добавление новых обязательных полей во внешнем АПИ, добавление интеграций с новыми внешними сервисами, публикация интерфейса взаимодействия с новым внешним АПИ)

При создании новой версии всегда инкрементируется максимальное изменение продукта. Например, если сборка претендует на изменение {path} и {minor} инкрементируется версия {minor}

Рекомендации к оформлению COMMIT'a
1) коммит начинается с ID задачи  в JIRA (например, PRJ-221)
2) Заголовок разделен с телом комментария (если он есть) пустой строкой
3) Заголовок комментария отражает суть проделанной работы (краткое описание) (не более 50 симв.)
4) подробное описание комментария может включать описание внесенных исправлений, и того, зачем они были сделаны. Это поможет другим разработчикам скорректировать поведение своего кода, например, при разрешении конфликта

Файл README
Для каждого проекта ведется файл README.md.
Файл ОБЯЗАТЕЛЬНО должен содержать : 
а) краткую инструкцию по изначальной настройке/деплою проекта
б) описание параметров конфигурации .env
в) описание сервисов и служб, которые необходимо запускать при деплое
г) список внешних сервисов, к которым необходим доступ

ВАЖНО! Не допускается использование файла README от вендора cms/framework

